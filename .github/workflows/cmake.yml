name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: uraimo/run-on-arch-action@v2
      name: Run commands
      id: runcmd
      with:
        arch: aarch64
        distro: fedora_latest
        
        # Create an artifacts directory
        setup: |
          mkdir -p "${PWD}/artifacts"

        # Mount the artifacts directory as /artifacts in the container
        dockerRunArgs: |
          --volume "${PWD}/artifacts:/artifacts"
          
        # Pass some environment variables to the container
        env: | # YAML, but pipe character is necessary
          artifact_name: jq-all-deps-fedora_latest_aarch64

        # Not required, but speeds up builds by storing container images in
        # a GitHub package registry.
        githubToken: ${{ github.token }}
        
       # Install some dependencies in the container. This speeds up builds if
        # you are also using githubToken. Any dependencies installed here will
        # be part of the container image that gets cached, so subsequent
        # builds don't have to re-install them. The image layer is cached
        # publicly in your project's package repository, so it is vital that
        # no secrets are present in the container state or logs.
        install: |
          yum -y update
          yum -y install yum-utils
          

        # Set an output parameter `uname` for use in subsequent steps
        run: |
          yumdownloader jq --resolve --destdir=${PWD}/artifacts
          echo "Produced artifact at /artifacts/${artifact_name}"
    - name: Show the artifact
      # Items placed in /artifacts in the container will be in
      # ${PWD}/artifacts on the host.
      run: |
        ls -al "${PWD}/artifacts"
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.1
      with:
        # Artifact name
        name:  jq-all-deps-fedora_latest_aarch64 # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: /home/runner/work/jq/jq/artifacts
        # The desired behavior if no files are found using the provided path.
   
